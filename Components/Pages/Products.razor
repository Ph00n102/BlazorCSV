@page "/products"
@using BlazorTest.Data
@using BlazorTest.Domain.Entities
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using System.Linq;
@rendermode InteractiveServer
@inject AppDbContext appDbContext
@inject IJSRuntime js

<PageTitle>Products</PageTitle>

<div class="card">
    <div class="card-body d-flex flex-row">
        <span class="flex-fill fw-boler text-end p-1">Upload</span>
        <InputFile class="form-control form-control-sm w-25" OnChange="HandleFileUpload" />
    </div>
</div>

<div class="card">
    <div class="card-header d-flex flex-row">
        <span class="flex-fill fw-boler">Products</span>
        <button type="button" class="btn btn-sm btn-primary" @onclick="DownloadProducts">
            <i class="bi bi-download me-1"></i>
            Download
        </button>
    </div>
    <table class="table table-striped md-0">
        <thead>
            <tr>
                <th>#</th>
                <th>Code</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @if(products is null)
            {
                <tr>
                    <td class="text-conter" colspan="4">Loading...</td>
                </tr>
            }
            else if(!products.Any())
            {
                <tr>
                    <td class="text-conter" colspan="4">No Products Added</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code{
    private List<Product>? products = null;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            await LoadProducts();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task LoadProducts()
    {
        products = await appDbContext.Products.ToListAsync();
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (e.File is not null)
        {
            var file = e.File;
            var config = new CsvConfiguration(CultureInfo.InvariantCulture) {HasHeaderRecord = true};
            using (var reader = new StreamReader(file.OpenReadStream(maxAllowedSize: 2097152)))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                var products = await csv.GetRecordsAsync<Product>().ToListAsync();
                await appDbContext.Products.AddRangeAsync(products);
                await appDbContext.SaveChangesAsync();
                await LoadProducts();
                await js.InvokeVoidAsync("alert", "Products added successfully!");
            }
        }
    
    }
    private async Task DownloadProducts()
    {
         var config = new CsvConfiguration(CultureInfo.InvariantCulture) {HasHeaderRecord = true};
         using (var memoryStream = new MemoryStream())
         using (TextWriter textWriter = new StreamWriter(memoryStream))
         using (var csvWriter = new CsvWriter(textWriter, config))
         {
            await csvWriter.WriteRecordsAsync(products);
            textWriter.Flush();
            memoryStream.Seek(0, SeekOrigin.Begin);
            using var streamRef = new DotNetStreamReference(memoryStream);
            await js.InvokeVoidAsync("downloadFileFromStream", "products.csv", streamRef);
         }
    }
}